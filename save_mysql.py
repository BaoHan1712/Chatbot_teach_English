import mysql.connector
from mysql.connector import Error

# C·∫•u h√¨nh
DB_HOST = "127.0.0.1"
DB_PORT = 3306
DB_USER = "root"
DB_PASS = "hoang123@"
DB_NAME = "aichat"

#////////////// ////////////////////////////////////////////////T·∫°o database v√† b·∫£ng n·∫øu ch∆∞a c√≥//////////////////////////////
# H√†m t·∫°o database n·∫øu ch∆∞a c√≥
def create_database():
    try:
        connection = mysql.connector.connect(
            host=DB_HOST,
            port=DB_PORT,
            user=DB_USER,
            password=DB_PASS
        )
        cursor = connection.cursor()
        cursor.execute(f"CREATE DATABASE IF NOT EXISTS {DB_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;")
        print(f"‚úÖ Database `{DB_NAME}` ƒë√£ s·∫µn s√†ng!")
    except Error as e:
        print("‚ùå L·ªói khi t·∫°o database:", e)


# H√†m t·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
# H√†m t·∫°o b·∫£ng n·∫øu ch∆∞a c√≥ (v√† th√™m c·ªôt role n·∫øu thi·∫øu)
def create_table():
    """T·∫°o b·∫£ng users n·∫øu ch∆∞a c√≥, v√† th√™m c·ªôt role n·∫øu thi·∫øu."""
    try:
        connection = mysql.connector.connect(
            host=DB_HOST,
            port=DB_PORT,
            user=DB_USER,
            password=DB_PASS,
            database=DB_NAME
        )
        cursor = connection.cursor()

        # T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INT AUTO_INCREMENT PRIMARY KEY,
                username VARCHAR(100) NOT NULL,
                email VARCHAR(100) NOT NULL UNIQUE,
                password VARCHAR(255) NOT NULL,
                role ENUM('user','admin') DEFAULT 'user',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ B·∫£ng `users` ƒë√£ s·∫µn s√†ng!")

        # Ki·ªÉm tra xem c·ªôt role c√≥ t·ªìn t·∫°i ch∆∞a
        cursor.execute("SHOW COLUMNS FROM users LIKE 'role'")
        result = cursor.fetchone()
        if not result:
            cursor.execute("ALTER TABLE users ADD COLUMN role ENUM('user','admin') DEFAULT 'user'")
            print("üîß ƒê√£ th√™m c·ªôt `role` v√†o b·∫£ng `users`.")

    except Error as e:
        print("‚ùå L·ªói khi t·∫°o b·∫£ng:", e)

# H√†m t·∫°o b·∫£ng lessons
def create_lessons_table():
    try:
        connection = mysql.connector.connect(
            host=DB_HOST,
            port=DB_PORT,
            user=DB_USER,
            password=DB_PASS,
            database=DB_NAME
        )
        cursor = connection.cursor()

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS lessons (
                id_lessons INT AUTO_INCREMENT PRIMARY KEY,
                id_user INT NOT NULL,
                topic VARCHAR(255) NOT NULL,
                model_ai VARCHAR(100) DEFAULT 'gemini 2.0',
                data_lesson LONGTEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (id_user) REFERENCES users(id) ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)
        print("‚úÖ B·∫£ng `lessons` ƒë√£ s·∫µn s√†ng!")
    except Error as e:
        print("‚ùå L·ªói khi t·∫°o b·∫£ng lessons:", e)
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

# H√†m t·∫°o b·∫£ng AI_voice
def create_table_ai_voice():
    """T·∫°o b·∫£ng AI_voice n·∫øu ch∆∞a c√≥."""
    try:
        connection = connect_to_mysql()
        if connection is None:
            return False

        cursor = connection.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS AI_voice (
                id_chat BIGINT AUTO_INCREMENT PRIMARY KEY,
                id_user INT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                model_AI VARCHAR(100) DEFAULT 'gemini 2.0',
                voice_user LONGTEXT,
                voice_ai LONGTEXT,
                CONSTRAINT fk_ai_voice_user FOREIGN KEY (id_user) REFERENCES users(id) ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)
        print("‚úÖ B·∫£ng `AI_voice` ƒë√£ s·∫µn s√†ng!")
        return True
    except Error as e:
        print("‚ùå L·ªói khi t·∫°o b·∫£ng AI_voice:", e)
        return False
    finally:
        if connection and connection.is_connected():
            cursor.close()
            connection.close()


# H√†m t·∫°o b·∫£ng AI_chat
def create_table_ai_chat():
    """T·∫°o b·∫£ng AI_chat n·∫øu ch∆∞a c√≥."""
    try:
        connection = connect_to_mysql()
        if connection is None:
            return False

        cursor = connection.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS AI_chat (
                id_chat BIGINT AUTO_INCREMENT PRIMARY KEY,
                id_user INT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                model_AI VARCHAR(100) DEFAULT 'gemini 2.0',
                chat_user LONGTEXT,
                chat_ai LONGTEXT,
                CONSTRAINT fk_ai_chat_user FOREIGN KEY (id_user) REFERENCES users(id) ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)
        print("‚úÖ B·∫£ng `AI_chat` ƒë√£ s·∫µn s√†ng!")
        return True
    except Error as e:
        print("‚ùå L·ªói khi t·∫°o b·∫£ng AI_chat:", e)
        return False
    finally:
        if connection and connection.is_connected():
            cursor.close()
            connection.close()


#///////////////////////////////////////////////////////////////////////////// USER//////////////////////////////////////////////////////////////////////

# H√†m k·∫øt n·ªëi MySQL
def connect_to_mysql():
    try:
        connection = mysql.connector.connect(
            host=DB_HOST,
            port=DB_PORT,
            user=DB_USER,
            password=DB_PASS,
            database=DB_NAME
        )
        if connection.is_connected():
            print("‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng!")
            return connection
    except Error as e:
        print("‚ùå L·ªói k·∫øt n·ªëi MySQL:", e)
    return None

# H√†m th√™m user (m·∫∑c ƒë·ªãnh role = user)
def insert_new_user(username, email, password):
    """Th√™m user m·ªõi v·ªõi role m·∫∑c ƒë·ªãnh l√† 'user'."""
    connection = connect_to_mysql()
    if connection is None:
        return False

    try:
        cursor = connection.cursor()
        sql = "INSERT INTO users (username, email, password, role) VALUES (%s, %s, %s, %s)"
        cursor.execute(sql, (username, email, password, "user"))  # m·∫∑c ƒë·ªãnh role = user
        connection.commit()
        print("‚úÖ Th√™m user m·ªõi th√†nh c√¥ng (role=user)!")
        return True
    except Error as e:
        print("‚ùå L·ªói khi th√™m user:", e)
        return False


        
# H√†m ƒëƒÉng nh·∫≠p user
def login_user(email, password):
    """Ki·ªÉm tra email v√† password, role"""
    connection = connect_to_mysql()
    if connection is None:
        return None

    try:
        cursor = connection.cursor(dictionary=True)  # tr·∫£ v·ªÅ dict thay v√¨ tuple
        sql = "SELECT * FROM users WHERE email = %s AND password = %s"
        cursor.execute(sql, (email, password))
        result = cursor.fetchone()
        if result:
            print(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Xin ch√†o {result['username']} (role={result['role']})")
        else:
            print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!")
        return result
    except Error as e:
        print("‚ùå L·ªói khi ki·ªÉm tra user:", e)
        return None

def insert_lesson(id_user, topic, data_lesson, model_ai="gemini 2.0"):
    """ l∆∞u l·∫°i b√†i h·ªçc c·ªßa user v√†o b·∫£ng lessons """
    connection = connect_to_mysql()
    if connection is None:
        return False

    try:
        cursor = connection.cursor()
        sql = """
            INSERT INTO lessons (id_user, topic, model_ai, data_lesson)
            VALUES (%s, %s, %s, %s)
        """
        cursor.execute(sql, (id_user, topic, model_ai, data_lesson))
        connection.commit()
        print(f"‚úÖ B√†i h·ªçc m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m cho user_id={id_user}, topic={topic}")
        return True
    except Error as e:
        print("‚ùå L·ªói khi th√™m b√†i h·ªçc:", e)
        return False
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

# H√†m th√™m d·ªØ li·ªáu v√†o b·∫£ng AI_chat
def insert_ai_chat(id_user, chat_user, chat_ai, model_ai="gemini 2.0"):
    """L∆∞u h·ªôi tho·∫°i d·∫°ng text v√†o b·∫£ng AI_chat."""
    connection = connect_to_mysql()
    if connection is None:
        return False

    try:
        cursor = connection.cursor()
        sql = """
            INSERT INTO AI_chat (id_user, chat_user, chat_ai, model_ai)
            VALUES (%s, %s, %s, %s)
        """
        cursor.execute(sql, (id_user, chat_user, chat_ai, model_ai))
        connection.commit()
        print(f"‚úÖ H·ªôi tho·∫°i m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m cho user_id={id_user}")
        return True
    except Error as e:
        print("‚ùå L·ªói khi th√™m AI_chat:", e)
        return False
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


# H√†m th√™m d·ªØ li·ªáu v√†o b·∫£ng AI_voice
def insert_ai_voice(id_user, voice_user, voice_ai, model_ai="gemini 2.0"):
    """L∆∞u h·ªôi tho·∫°i d·∫°ng gi·ªçng n√≥i v√†o b·∫£ng AI_voice."""
    connection = connect_to_mysql()
    if connection is None:
        return False

    try:
        cursor = connection.cursor()
        sql = """
            INSERT INTO AI_voice (id_user, voice_user, voice_ai, model_ai)
            VALUES (%s, %s, %s, %s)
        """
        cursor.execute(sql, (id_user, voice_user, voice_ai, model_ai))
        connection.commit()
        print(f"‚úÖ Voice m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m cho user_id={id_user}")
        return True
    except Error as e:
        print("‚ùå L·ªói khi th√™m AI_voice:", e)
        return False
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

#//////////////////////////////////////////////////////////////// ADMIN    //////////////////////////////////////////////////////////////
 ## Th√™m user m·ªõi v·ªõi quy·ªÅn admin.
def admin_insert_user(username, email, password, role):
    connection = connect_to_mysql()
    if connection is None:
        return False, "L·ªói k·∫øt n·ªëi CSDL"

    try:
        cursor = connection.cursor()
        sql = "INSERT INTO users (username, email, password, role) VALUES (%s, %s, %s, %s)"
        cursor.execute(sql, (username, email, password, role))
        connection.commit()
        return True, f"Th√™m user '{username}' th√†nh c√¥ng (role={role})!"
    except Error as e:
        return False, f"L·ªói khi th√™m user: {e}"

        
# H√†m update th√¥ng tin user
def update_user(user_id, username, email, password, role):
    connection = connect_to_mysql()
    if connection is None:
        return False

    try:
        cursor = connection.cursor()
        sql = """
            UPDATE users
            SET username = %s, email = %s, password = %s, role = %s
            WHERE id = %s
        """
        cursor.execute(sql, (username, email, password, role, user_id))
        connection.commit()

        if cursor.rowcount > 0:
            print(f"‚úÖ User ID {user_id} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")
            return True
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user ID {user_id} ƒë·ªÉ c·∫≠p nh·∫≠t.")
            return False
    except Error as e:
        print("‚ùå L·ªói khi update user:", e)
        return False



# H√†m x√≥a user
def delete_user(user_id):
    connection = connect_to_mysql()
    if connection is None:
        return False

    try:
        cursor = connection.cursor()
        sql = "DELETE FROM users WHERE id = %s"
        cursor.execute(sql, (user_id,))
        connection.commit()

        if cursor.rowcount > 0:
            print(f"üóëÔ∏è User ID {user_id} ƒë√£ b·ªã x√≥a!")
            return True
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user ID {user_id} ƒë·ªÉ x√≥a.")
            return False
    except Error as e:
        print("‚ùå L·ªói khi x√≥a user:", e)
        return False


# H√†m xem to√†n b·ªô ng∆∞·ªùi d√πng trong b·∫£ng users
def show_all_users():
    """L·∫•y t·∫•t c·∫£ user trong b·∫£ng users."""
    connection = connect_to_mysql()
    if connection is None:
        return None

    try:
        cursor = connection.cursor(dictionary=True)  # tr·∫£ v·ªÅ d·∫°ng dict
        cursor.execute("SELECT * FROM users")
        rows = cursor.fetchall()
        print(f"üë• T√¨m th·∫•y {len(rows)} user.")
        return rows if rows else []

    except Error as e:
        print("‚ùå L·ªói khi truy v·∫•n d·ªØ li·ªáu:", e)
        return None

# H√†m l·∫•y to√†n b·ªô d·ªØ li·ªáu t·∫•t c·∫£ b·∫£ng trong database
def get_all_tables_data():
    """L·∫•y to√†n b·ªô d·ªØ li·ªáu t·∫•t c·∫£ b·∫£ng trong database."""
    try:
        connection = mysql.connector.connect(
            host=DB_HOST,
            port=DB_PORT,
            user=DB_USER,
            password=DB_PASS,
            database=DB_NAME
        )
        if connection.is_connected():
            cursor = connection.cursor(dictionary=True)
            cursor.execute("SHOW TABLES")
            tables = cursor.fetchall()
            all_data = []

            for table in tables:
                # key t√™n c·ªôt c·ªßa dict tr·∫£ v·ªÅ t√πy driver, n√™n l·∫•y value ƒë·∫ßu ti√™n
                table_name = list(table.values())[0] if isinstance(table, dict) else table[0]
                cursor.execute(f"SELECT * FROM {table_name}")
                rows = cursor.fetchall()
                all_data.append({
                    "table": table_name,
                    "columns": list(rows[0].keys()) if rows else [],
                    "rows": rows
                })
            print(f"‚úÖ L·∫•y d·ªØ li·ªáu t·ª´ {len(tables)} b·∫£ng th√†nh c√¥ng.")
            return all_data
    except Error as e:
        print(f"L·ªói: {e}")
        return []
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


# # Test
if __name__ == "__main__":
    create_database()   # üîπ t·∫°o DB n·∫øu ch∆∞a c√≥
    # create_table()      # üîπ t·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
    # insert_new_user("bao", "bao123@gmail.com", "123")
    # login_user("hoang123@gmail.com", "123456")
    create_table_ai_voice() # t·∫°o b·∫£ng AI_voice
    create_table_ai_chat()  # t·∫°o b·∫£ng AI_chat
    create_lessons_table() # T·∫°o b·∫£ng lessons
    insert_lesson(3, "gia ƒë√¨nh", "N·ªôi dung b√†i h·ªçc v·ªÅ gia ƒë√¨nh c·∫£m nh·∫≠n v·ªÅ tr√¨nh ƒë·ªô anh vƒÉn")
    
    # Th√™m h·ªôi tho·∫°i text
    insert_ai_chat(3, "Hello AI!", "Xin ch√†o, t√¥i l√† AI.")

    # Th√™m h·ªôi tho·∫°i voice
    insert_ai_voice(3, "voice_user_data_base64_or_text", "voice_ai_data_base64_or_text")
    show_all_users()