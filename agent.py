from langchain_google_genai import ChatGoogleGenerativeAI
from prompt import BASE_ROLE_PROMPT, PROMPTS
from dotenv import load_dotenv
from flask import Flask, send_file, jsonify
from flask_cors import CORS
import os
import json
from struc_lesson import *
load_dotenv()

app = Flask(__name__)
CORS(app)

class EnglishTeachingAgent:
    def __init__(self, api_key: str, model: str = "gemini-2.0-flash"):
        self.llm = ChatGoogleGenerativeAI(
            api_key=api_key,
            model=model,
            temperature=1
        )

    def generate(self, task: str, **kwargs) -> dict:
        if task not in PROMPTS:
            raise ValueError(f"Nhi·ªám v·ª• {task} ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong PROMPTS")

        full_prompt = BASE_ROLE_PROMPT + "\n\n" + PROMPTS[task].format(**kwargs)
        response = self.llm.invoke(full_prompt)

        try:
            result_json = json.loads(response.content)
        except json.JSONDecodeError:
            result_json = {"content": response.content}

        return result_json

API_KEY = os.getenv("GEMINI_API_KEY")
agent = EnglishTeachingAgent(api_key=API_KEY)

@app.route('/')
def serve_lesson():
    return send_file('lesson.html')

@app.route('/generate/lesson/<topic>')
def generate_content(topic):
    try:
        # B∆∞·ªõc 1: T·∫°o b√†i h·ªçc ban ƒë·∫ßu t·ª´ AI
        print(f"üöÄ B∆∞·ªõc 1: T·∫°o b√†i h·ªçc ban ƒë·∫ßu cho ch·ªß ƒë·ªÅ '{topic}'")
        lesson_data = agent.generate("lesson", topic=topic)
        content = lesson_data.get('content', '{}')
        print("üî• AI raw content:", content)

        try:
            # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p AI tr·∫£ v·ªÅ markdown code blocks
            if "```json" in content:
                # T√¨m v√† extract JSON t·ª´ markdown
                start = content.find("```json") + 7
                end = content.find("```", start)
                if end != -1:
                    json_str = content[start:end].strip()
                    ai_json = json.loads(json_str)
                else:
                    ai_json = {"topic": topic}  # fallback
            elif "```" in content:
                # T√¨m JSON trong code blocks th√¥ng th∆∞·ªùng
                start = content.find("```") + 3
                end = content.find("```", start)
                if end != -1:
                    json_str = content[start:end].strip()
                    ai_json = json.loads(json_str)
                else:
                    ai_json = {"topic": topic}  # fallback
            else:
                # Parse JSON th√¥ng th∆∞·ªùng
                ai_json = json.loads(content)
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON Parse Error: {e}")
            print(f"Raw content: {content}")
            ai_json = {"topic": topic}  # fallback

        # B∆∞·ªõc 2: Chu·∫©n h√≥a c·∫•u tr√∫c v√† t·∫°o exercises m·∫´u
        print("üîß B∆∞·ªõc 2: Chu·∫©n h√≥a c·∫•u tr√∫c v√† t·∫°o exercises")
        standardized_lesson = standardize_lesson(ai_json, topic)
        print("‚úÖ Standardized lesson JSON:", json.dumps(standardized_lesson, ensure_ascii=False, indent=2))

        # B∆∞·ªõc 3: ƒê∆∞a b√†i h·ªçc ƒë√£ chu·∫©n h√≥a qua AI l·∫ßn 2 ƒë·ªÉ t·ªëi ∆∞u h√≥a
        print("üéØ B∆∞·ªõc 3: T·ªëi ∆∞u h√≥a b√†i h·ªçc qua AI")
        lesson_json_str = json.dumps(standardized_lesson, ensure_ascii=False, indent=2)
        
        final_lesson_data = agent.generate("finalize_lesson", lesson_data=lesson_json_str)
        final_content = final_lesson_data.get('content', '{}')
        print("üåü AI final content:", final_content)

        try:
            # Parse JSON cu·ªëi c√πng t·ª´ AI - x·ª≠ l√Ω markdown code blocks
            if "```json" in final_content:
                start = final_content.find("```json") + 7
                end = final_content.find("```", start)
                if end != -1:
                    json_str = final_content[start:end].strip()
                    final_result = json.loads(json_str)
                else:
                    raise json.JSONDecodeError("No closing ``` found", final_content, 0)
            elif "```" in final_content:
                start = final_content.find("```") + 3
                end = final_content.find("```", start)
                if end != -1:
                    json_str = final_content[start:end].strip()
                    final_result = json.loads(json_str)
                else:
                    raise json.JSONDecodeError("No closing ``` found", final_content, 0)
            else:
                final_result = json.loads(final_content)
            
            print("üéâ Final lesson JSON:", json.dumps(final_result, ensure_ascii=False, indent=2))
            return jsonify(final_result)
        except json.JSONDecodeError as e:
            # N·∫øu AI kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá, d√πng k·∫øt qu·∫£ ƒë√£ chu·∫©n h√≥a
            print(f"‚ö†Ô∏è AI kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá: {e}")
            print("üîÑ S·ª≠ d·ª•ng k·∫øt qu·∫£ ƒë√£ chu·∫©n h√≥a")
            return jsonify(standardized_lesson)

    except Exception as e:
        print(f"‚ùå Error generating content: {str(e)}")
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(debug=True, port=5000)